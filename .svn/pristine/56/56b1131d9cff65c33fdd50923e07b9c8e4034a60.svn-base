package com.wyzk.lottery.video.activity;

import android.app.AlertDialog;
import android.app.Dialog;
import android.app.ProgressDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.pm.ActivityInfo;
import android.content.res.Configuration;
import android.graphics.Color;
import android.hardware.Camera.CameraInfo;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.preference.PreferenceManager;
import android.support.annotation.RequiresApi;
import android.text.TextUtils;
import android.text.method.ScrollingMovementMethod;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.WindowManager;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.ScrollView;
import android.widget.TextView;
import android.widget.Toast;

import com.facebook.drawee.view.SimpleDraweeView;
import com.fsix.mqtt.bean.MQBean;
import com.fsix.mqtt.util.GsonUtil;
import com.wangsu.wsrtc.media.MediaConstants;
import com.wangsu.wsrtc.sdk.WSChatConfig;
import com.wangsu.wsrtc.sdk.WSChatConstants;
import com.wangsu.wsrtc.sdk.WSSurfaceView;
import com.wangsu.wsrtc.sdk.WSVersion;
import com.wangsu.wsrtc.signal.SignalConstants;
import com.wangsu.wsrtc.signal.SignalManager.ChatStateListener;
import com.wangsu.wsrtc.utils.ALog;
import com.wyzk.lottery.R;
import com.wyzk.lottery.constant.IConst;
import com.wyzk.lottery.constant.User;
import com.wyzk.lottery.model.MQPlayerBean;
import com.wyzk.lottery.model.ResultReturn;
import com.wyzk.lottery.model.RoomModel;
import com.wyzk.lottery.model.RoomRoundModel;
import com.wyzk.lottery.model.RoundInfoModel;
import com.wyzk.lottery.model.UserInfoModel;
import com.wyzk.lottery.model.WinLoseModel;
import com.wyzk.lottery.network.Network;
import com.wyzk.lottery.utils.ACache;
import com.wyzk.lottery.utils.BuildManager;
import com.wyzk.lottery.utils.TimeUtils;
import com.wyzk.lottery.utils.ToastUtil2;
import com.wyzk.lottery.video.adapter.SettingsAdapter;
import com.wyzk.lottery.video.linkmic.LinkMicManager;
import com.wyzk.lottery.video.object.SettingItem;
import com.wyzk.lottery.video.utils.DialogUtils;
import com.wyzk.lottery.video.utils.SettingsPanelViewUtil;
import com.wyzk.lottery.video.utils.UserMediaStatus;
import com.wyzk.lottery.view.MarqueeView;
import com.wyzk.lottery.view.PlaceView;
import com.wyzk.lottery.view.TrendPopupWindow;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import rx.Subscription;
import rx.android.schedulers.AndroidSchedulers;
import rx.functions.Action1;
import rx.schedulers.Schedulers;

import static com.wangsu.wsrtc.sdk.WSRtcUtils.formatPullStatusString;
import static com.wangsu.wsrtc.sdk.WSRtcUtils.formatPushStatusString;

public class Pull2Activity extends BaseActivity implements OnClickListener, OnItemClickListener, LinkMicManager.LinkMicListener {
    private static final String TAG = "PullActivity";

    protected StringBuffer mChatEventLogStr = new StringBuffer("");
    private int roomId;
    private int gameId;
    private String token;
    private RoomRoundModel roundModel;
    private boolean isGameStart = false;

    private int mCurrentCameraId = CameraInfo.CAMERA_FACING_FRONT;
    private String mPushUrl = null;
    private String mPullUrl = null;
    private String mRoomId = null;
    private String mUserId = null;
    private String mAnchorId = null;
    private WSChatConfig mChatConfig = null;
    private WSSurfaceView mPlayView;
    private RelativeLayout surface_group;
    private TextView mStatusLogTv;
    private ScrollView mStatusScrollView;
    private TextView mChatEventLogTv;
    private ScrollView mLogScrollView;
    private ImageButton mChatBtn;
    private ImageButton mFlashImageBtn = null;
    private LinearLayout mChatFounctionGroup = null;
    private ImageButton mMuteImageBtn = null;
    private ChatStateListener mChatStateChangeListener = null;
    private WSChatConstants.ChatState mChatState = WSChatConstants.ChatState.IDLE;
    private LinkMicManager mChatManager = null;
    private SettingsPanelViewUtil mSettingPanelUtil;
    private SharedPreferences mPreferences = null;

    private boolean mIsMute = false;
    private boolean mIsLinkMic = false;
    private ProgressDialog mStartProgressDialog = null;
    private ProgressDialog mStopProgressDialog = null;
    private UserMediaStatus mMediaStatus = new UserMediaStatus();
    private List<SettingItem> mSettingItems = new ArrayList<SettingItem>() {
        {
            add(new SettingItem(R.id.setting_show_log, "日志", 0, true));
        }
    };
    private TextView tv_username;
    private TextView tv_user_integral;
    private TextView tv_bet_integral;
    private int userIntegral;//用户积分
    private int betIntegral; //用户已下注积分
    private TextView serial_num;//流水号
    private TextView status;//当前状态 ，下注 封盘。。。
    private TextView time;//剩余时间
    private PlaceView p1;//方位1
    private PlaceView p2;//方位2
    private PlaceView p3;//方位3
    private PlaceView p4;//方位4
    private PlaceView p5;//方位5
    private PlaceView p6;//方位6
    private int positionId;
    private EditText score;
    private TextView minus;
    private TextView plus;
    private TextView show;
    private RoomModel.RowModel rowModel;
    private Handler handler = new Handler(Looper.getMainLooper());
    private int countdown = 0;
    //当前状态 //1：下注中，2：封盘中，3：结算中，4：结算完成，5：场次作废
    private int mStatus;
    private Runnable countDownRunnable = new Runnable() {
        @Override
        public void run() {
            if (countdown <= 0) {
                //倒计时结束，自动封盘
                isGameStart = true;
                //倒计时结束，取消倒计时操作
                handler.removeCallbacks(countDownRunnable);
                //倒计时结束，计数重置
                roundModel.setCountdown(0);
                countdown = 0;

                //设置封盘状态
                roundModel.setRoundState(2);
                updateRoomStatus(roundModel);
            } else {
                handler.postDelayed(countDownRunnable, 1000);
            }
            time.setText(countdown + "s");
            countdown--;
        }
    };
    private Subscription betSubscription;

    private Subscription lastRoomSubscription;

    private Button yishi;
    private Button wushi;
    private Button yibai;
    private Button wubai;
    private Button yik;
    private Button wuk;
    private Button shik;
    private Button wushik;
    private Button yibaik;

    private MarqueeView mMarqueeView;

    @RequiresApi(api = Build.VERSION_CODES.M)
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
        mPreferences = PreferenceManager.getDefaultSharedPreferences(this);
        requestFullScreen();
        setContentView(R.layout.activity_pull2);
        BuildManager.setStatusTransOther(this);

        initLayout();
        initFromIntent();
        checkAndRequestPermission();
        // 我是观众
        mChatManager = LinkMicManager.getInstance();
        mChatManager.init(this, false, mChatConfig);

        mChatManager.registerLinkMicListener(this);
        mChatStateChangeListener = new ChatStateListener() {

            @Override
            public void onChatStateChange(final WSChatConstants.ChatState preState, final WSChatConstants.ChatState newState) {
                Log.i(TAG, "new state : " + newState.toString());
                mChatState = newState;
                runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        mChatFounctionGroup.setVisibility(mChatState == WSChatConstants.ChatState.INTERACTING ? View.VISIBLE : View.GONE);
                        if (preState == WSChatConstants.ChatState.INTERACTING || newState == WSChatConstants.ChatState.INTERACTING) {
                        }
                    }
                });
            }
        };
        mChatManager.registerChatStateChangeListener(mChatStateChangeListener);
    }

    MQPlayerBean mqPlayerBean;

    @Override
    public void onNotify(MQBean eventData) {
        super.onNotify(eventData);
        if (eventData != null) {
            Object data = eventData.getData();
            if (data instanceof String) {
                System.out.println("hhhhhhh" + eventData.toString());
                String json = (String) data;
                mqPlayerBean = GsonUtil.getInstance().toObject(json, MQPlayerBean.class);
                if (mqPlayerBean != null) {
                    mStatus = mqPlayerBean.getStatus(); //1：下注中，2：封盘中，3：结算中，4：结算完成，5：场次作废
                    int position = mqPlayerBean.getPosition();
                    int betValue = mqPlayerBean.getBetValue();
                    if (position != 0 && betValue != 0) {
                        setPlaceValue(position, betValue);
                    }
                    getUserInfo();
                    handler.post(new Runnable() {
                        @Override
                        public void run() {
                            setStatus(mStatus, true);
                        }
                    });
                }
            } else if (data instanceof Throwable) {
                Throwable e = (Throwable) data;
                e.printStackTrace();
            }
        }
    }

    private void getUserInfo() {
        Network.getNetworkInstance().getUserApi()
                .getUserInfo(token)
                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(new Action1<ResultReturn<UserInfoModel>>() {
                    @Override
                    public void call(ResultReturn<UserInfoModel> userInfoModelResultReturn) {
                        if (userInfoModelResultReturn != null) {
                            UserInfoModel user = userInfoModelResultReturn.getData();
                            if (user != null) {
                                User.userInfo = user;
                                userIntegral = user.getIntegralValue();
                                tv_user_integral.setText(User.userInfo == null ? "" : "" + User.userInfo.getIntegralValue());
                                tv_username.setText(User.userInfo == null ? "" : "" + User.userInfo.getUsername());
                            }
                        }

                    }
                }, new Action1<Throwable>() {
                    @Override
                    public void call(Throwable throwable) {

                    }
                });
    }

    private void killTimer() {
        handler.removeCallbacks(countDownRunnable);
        handler.post(new Runnable() {
            @Override
            public void run() {
                time.setText("0");
            }
        });
    }

    private void initHttpRequest() {
        lastRoomSubscription = Network.getNetworkInstance().getLiveApi()
                .getLastRoomRound(token, roomId)
                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(new Action1<ResultReturn<RoomRoundModel>>() {
                    @Override
                    public void call(ResultReturn<RoomRoundModel> ret) {
                        if (ret.getCode() == ResultReturn.ResultCode.RESULT_OK.getValue()) {
                            updateRoomStatus(ret.getData());
                        }
                    }
                }, new Action1<Throwable>() {
                    @Override
                    public void call(Throwable throwable) {
                    }
                });
    }

    private void updateRoomStatus(RoomRoundModel r) {
        if (r != null) {
            System.out.println("hhhhh=" + r);
            roundModel = r;
            mStatus = roundModel.getRoundState();//房间状态（1：下注中，2：封盘中，3：结算中，4：结算完成，5：场次作废）
            //下注位置
            setChecked(roundModel.getBetPosition());
            countdown = roundModel.getCountdown();
            if (mStatus == 1 && countdown == 0) {
                //主播未封盘
                mStatus = 2;
            }
            setStatus(mStatus, false);
            List<RoomRoundModel.PlaceBetModel> placeBetModels = roundModel.getList();
            if (placeBetModels != null && placeBetModels.size() > 0) {
                int length = placeBetModels.size();
                for (int i = 0; i < length; i++) {
                    RoomRoundModel.PlaceBetModel placeBetModel = placeBetModels.get(i);
                    int betPosition = placeBetModel.getPosition();
                    int betValue = placeBetModel.getBetValue();
                    int count = placeBetModel.getCount();
                    setPlaceValue(betPosition, betValue, count);
                }
            } else {
                //此处不能清除，因为可能就你一个玩家，获取不到list
                clearData();
            }

            if (countdown > 0) {
                handler.post(countDownRunnable);
            } else {
                handler.removeCallbacks(countDownRunnable);
            }
        }
    }

    /**
     * @param value
     * @param getData 是否需要拉接口获取数据
     */
    public void setStatus(int value, boolean getData) {
        serial_num.setText("流水号：" + roundModel.getRoomRoundId());
        switch (value) {
            case 1://下注中
                status.setText(getString(R.string.status1));
                time.setVisibility(View.VISIBLE);
                if (getData) {
                    clearData();
                    initHttpRequest();
                }
                isGameStart = false;
                isBet = false;
                break;
            case 2://封盘
                killTimer();
                status.setText(getString(R.string.status2));
                time.setVisibility(View.GONE);
                isGameStart = true;
                break;
            case 3://结算中
                killTimer();
                status.setText(getString(R.string.status3));
                time.setVisibility(View.GONE);
                isGameStart = true;
                break;
            case 4://结算完成
                killTimer();
                status.setText(getString(R.string.status4));
                time.setVisibility(View.GONE);
                isGameStart = true;
                tv_bet_integral.setText(String.valueOf(0));
                clearData();
                getTrend();
                if (mqPlayerBean != null && isBet) {
                    //本人下注了才需要查询盈亏情况
                    getWinLoseByRoundId(mqPlayerBean.getRoomRoundId());
                }
                break;
            case 5://场次作废
                killTimer();
                status.setText(getString(R.string.status5));
                time.setVisibility(View.GONE);
                isGameStart = true;
                tv_bet_integral.setText(String.valueOf(0));
                clearData();
                break;
        }
    }

    /**
     * 场次作废 清除数据
     */
    private void clearData() {
        p1.setItemNumText(0);
        p1.setItemPlacePeo(0);
        p2.setItemNumText(0);
        p2.setItemPlacePeo(0);
        p3.setItemNumText(0);
        p3.setItemPlacePeo(0);
        p4.setItemNumText(0);
        p4.setItemPlacePeo(0);
        p5.setItemNumText(0);
        p5.setItemPlacePeo(0);
        p6.setItemNumText(0);
        p6.setItemPlacePeo(0);
        clearSelect();
        positionId = 0;//清空选择的位置
    }

    /**
     * 清除座位选择
     */
    private void clearSelect() {
        p1.setItemChecked(false);
        p2.setItemChecked(false);
        p3.setItemChecked(false);
        p4.setItemChecked(false);
        p5.setItemChecked(false);
        p6.setItemChecked(false);
    }

    private void initLayout() {
        mPlayView = (WSSurfaceView) findViewById(R.id.surface_main);
        surface_group = (RelativeLayout) findViewById(R.id.surface_group);
        surface_group.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View v) {
                RelativeLayout.LayoutParams lp = (RelativeLayout.LayoutParams) surface_group.getLayoutParams();
                if (lp.width == WindowManager.LayoutParams.MATCH_PARENT) {
                    lp.width = (int) (getResources().getDimension(R.dimen.dimens248) + 0.5f);
                    lp.height = (int) (getResources().getDimension(R.dimen.dimens140) + 0.5f);
                } else {
                    lp.width = WindowManager.LayoutParams.MATCH_PARENT;
                    lp.height = WindowManager.LayoutParams.MATCH_PARENT;
                }
                surface_group.setLayoutParams(lp);
            }
        });
        mChatBtn = (ImageButton) findViewById(R.id.btn_chat);
        mChatBtn.setOnClickListener(this);
        findViewById(R.id.btn_switch).setOnClickListener(this);
        mFlashImageBtn = (ImageButton) findViewById(R.id.btn_flash);
        mFlashImageBtn.setOnClickListener(this);
        mMuteImageBtn = (ImageButton) findViewById(R.id.btn_mute);
        mMuteImageBtn.setOnClickListener(this);
        mChatFounctionGroup = (LinearLayout) findViewById(R.id.chat_function_group);
        findViewById(R.id.btn_setting).setOnClickListener(this);
        mSettingPanelUtil = new SettingsPanelViewUtil(this, new SettingsAdapter(this, mSettingItems), this);

        //Log
        mStatusLogTv = (TextView) findViewById(R.id.tv_statusLog);
        mStatusLogTv.setMovementMethod(new ScrollingMovementMethod());
        mStatusScrollView = (ScrollView) findViewById(R.id.sv_statusLog);
        mStatusScrollView.setVisibility(View.GONE);

        mChatEventLogTv = (TextView) findViewById(R.id.tv_chatEventLog);
        mChatEventLogTv.setText(mChatEventLogStr);
        mChatEventLogTv.setMovementMethod(new ScrollingMovementMethod());
        mLogScrollView = (ScrollView) findViewById(R.id.sv_chatLog);
        mLogScrollView.setVisibility(View.GONE);

        tv_user_integral = (TextView) findViewById(R.id.tv_user_integral);
        tv_username = (TextView) findViewById(R.id.tv_username);
        tv_bet_integral = (TextView) findViewById(R.id.bet_integral);
        serial_num = (TextView) findViewById(R.id.serial_num);
        status = (TextView) findViewById(R.id.status);
        time = (TextView) findViewById(R.id.time);

        p1 = (PlaceView) findViewById(R.id.p1);
        p2 = (PlaceView) findViewById(R.id.p2);
        p3 = (PlaceView) findViewById(R.id.p3);
        p4 = (PlaceView) findViewById(R.id.p4);
        p5 = (PlaceView) findViewById(R.id.p5);
        p6 = (PlaceView) findViewById(R.id.p6);

        p1.setOnClickListener(this);
        p2.setOnClickListener(this);
        p3.setOnClickListener(this);
        p4.setOnClickListener(this);
        p5.setOnClickListener(this);
        p6.setOnClickListener(this);

        mMarqueeView = (MarqueeView) findViewById(R.id.adv);
        mMarqueeView.setText(getString(R.string.tips));

        tv_user_integral.setText(User.userInfo == null ? "" : "" + User.userInfo.getIntegralValue());
        tv_username.setText(User.userInfo == null ? "" : "" + User.userInfo.getIntegralValue());

        score = (EditText) findViewById(R.id.score);
        minus = (TextView) findViewById(R.id.minus);
        plus = (TextView) findViewById(R.id.plus);
        minus.setOnClickListener(this);
        plus.setOnClickListener(this);
        show = (TextView) findViewById(R.id.show);
        show.setOnClickListener(this);

        yishi = (Button) findViewById(R.id.yishi);
        wushi = (Button) findViewById(R.id.wushi);
        yibai = (Button) findViewById(R.id.yibai);
        wubai = (Button) findViewById(R.id.wubai);
        yik = (Button) findViewById(R.id.yik);
        wuk = (Button) findViewById(R.id.wuk);
        shik = (Button) findViewById(R.id.shik);
        wushik = (Button) findViewById(R.id.wushik);
        yibaik = (Button) findViewById(R.id.yibaik);

        yishi.setOnClickListener(this);
        wushi.setOnClickListener(this);
        yibai.setOnClickListener(this);
        wubai.setOnClickListener(this);
        yik.setOnClickListener(this);
        wuk.setOnClickListener(this);
        shik.setOnClickListener(this);
        wushik.setOnClickListener(this);
        yibaik.setOnClickListener(this);

        final TextView current_time = (TextView) findViewById(R.id.current_time);
        TimeUtils.sub(new TimeUtils.CallBack() {
            @Override
            public void onNext(String str) {
                if (!TextUtils.isEmpty(str)) {
                    current_time.setText(str);
                }
            }
        });
    }

    @Override
    protected void onStart() {
        super.onStart();
        mMarqueeView.startScroll();
    }

    @Override
    protected void onStop() {
        super.onStop();
        mMarqueeView.stopScroll();
    }

    private void setChecked(int position) {
        if (isGameStart) {
            tips(getString(R.string.game_already_start));
            return;
        }
        if (isBet) {
            tips(getString(R.string.already_bet));
            return;
        }
        p1.setItemChecked(false);
        p2.setItemChecked(false);
        p3.setItemChecked(false);
        p4.setItemChecked(false);
        p5.setItemChecked(false);
        p6.setItemChecked(false);
        switch (position) {
            case 1:
                positionId = 1;
                p1.setItemChecked(true);
                break;
            case 2:
                positionId = 2;
                p2.setItemChecked(true);
                break;
            case 3:
                positionId = 3;
                p3.setItemChecked(true);
                break;
            case 4:
                positionId = 4;
                p4.setItemChecked(true);
                break;
            case 5:
                positionId = 5;
                p5.setItemChecked(true);
                break;
            case 6:
                positionId = 6;
                p6.setItemChecked(true);
                break;
        }
        betIntegral = 0;
        tv_bet_integral.setText(String.valueOf(betIntegral));
    }

    private void setPlaceValue(int position, int betValue) {
        switch (position) {
            case 1:
                p1.setItemNumText(p1.getItemNum() + betValue);
                p1.setItemPlacePeo(p1.getItemPlacePeo() + 1);
                break;
            case 2:
                p2.setItemNumText(p2.getItemNum() + betValue);
                p2.setItemPlacePeo(p2.getItemPlacePeo() + 1);
                break;
            case 3:
                p3.setItemNumText(p3.getItemNum() + betValue);
                p3.setItemPlacePeo(p3.getItemPlacePeo() + 1);
                break;
            case 4:
                p4.setItemNumText(p4.getItemNum() + betValue);
                p4.setItemPlacePeo(p4.getItemPlacePeo() + 1);
                break;
            case 5:
                p5.setItemNumText(p5.getItemNum() + betValue);
                p5.setItemPlacePeo(p5.getItemPlacePeo() + 1);
                break;
            case 6:
                p6.setItemNumText(p6.getItemNum() + betValue);
                p6.setItemPlacePeo(p6.getItemPlacePeo() + 1);
                break;
        }
    }

    private void setPlaceValue(int position, int betValue, int count) {
        switch (position) {
            case 1:
                p1.setItemNumText(betValue);
                p1.setItemPlacePeo(count);
                break;
            case 2:
                p2.setItemNumText(betValue);
                p2.setItemPlacePeo(count);
                break;
            case 3:
                p3.setItemNumText(betValue);
                p3.setItemPlacePeo(count);
                break;
            case 4:
                p4.setItemNumText(betValue);
                p4.setItemPlacePeo(count);
                break;
            case 5:
                p5.setItemNumText(betValue);
                p5.setItemPlacePeo(count);
                break;
            case 6:
                p6.setItemNumText(betValue);
                p6.setItemPlacePeo(count);
                break;
        }
    }

    private void initFromIntent() {
        Bundle bundle = getIntent().getExtras();
        mPushUrl = bundle.getString("pushRtmpUrl", null);
        mPullUrl = bundle.getString("pullRtmpUrl", null);
        mCurrentCameraId = bundle.getInt("camera", -1);
        int encoderState = bundle.getInt("encoder", -1);
        int frameRate = bundle.getInt("fps");
        int bitrate = bundle.getInt("bitrate");
        WSChatConstants.VideoResolution videoResolution = (WSChatConstants.VideoResolution) bundle.getSerializable("resolution");
        boolean hasVideo = bundle.getBoolean("has_video");
        mRoomId = bundle.getString("roomId");
        mUserId = bundle.getString("userId");
        mAnchorId = bundle.getString("anchorId");

        UserInfoModel userInfoModel = (UserInfoModel) bundle.getSerializable("userInfoModel");
        if (userInfoModel != null) {
            userIntegral = userInfoModel.getIntegralValue();
            tv_user_integral.setText(String.valueOf(userIntegral));
            tv_username.setText(userInfoModel.getUsername());
        }

        rowModel = (RoomModel.RowModel) bundle.getSerializable("rowModel");
        if (rowModel != null) {
            roomId = rowModel.getRoomId();
            gameId = rowModel.getGameId();
        }

        registerMqtt(String.valueOf(roomId));

        token = ACache.get(Pull2Activity.this).getAsString(IConst.TOKEN);

        int screenOrientation = bundle.getInt("screenOrientation");
        int requestedOrientation = ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED;
        switch (screenOrientation) {
            case Configuration.ORIENTATION_PORTRAIT:
                requestedOrientation = ActivityInfo.SCREEN_ORIENTATION_PORTRAIT;
                break;
            case Configuration.ORIENTATION_LANDSCAPE:
                requestedOrientation = ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE;
                break;
            default:
                break;
        }
        setRequestedOrientation(requestedOrientation);

        mChatConfig = new WSChatConfig();
        mChatConfig.setCaptureView(mPlayView);
        mChatConfig.setCameraId(mCurrentCameraId);
        mChatConfig.setPreferCodecMode(encoderState);
        mChatConfig.setFps(frameRate);
        mChatConfig.setVideoBitrate(bitrate);
        mChatConfig.setVideoResolution(videoResolution);
        mChatConfig.setHasVideo(hasVideo);

        mChatConfig.setAppId("yehua");
        mChatConfig.setAuthKey("C0ED2EB419E14EE38BE38D3D1AFC9E4A");
        mChatConfig.setPushRtmpUrl(mPushUrl);
        mChatConfig.setPullRtmpUrl(mPullUrl);
        //SlsUrl测试使用，不必填写
        mChatConfig.setSlsUrl(mPreferences.getString(getString(R.string.pref_private_sls_url_key), ""));
        //DispatchUrl测试使用，不必填写
        mChatConfig.setDispatchUrl(mPreferences.getString(getString(R.string.pref_private_dispatch_url_key), ""));
        mChatConfig.setUserId(mUserId);
        mChatConfig.setRoomID(mRoomId);
        mChatConfig.setAnchorId(mAnchorId);
        mChatConfig.setIsAnchor(false);
    }

    @Override
    protected void onResume() {
        super.onResume();
        updateLayout();
        mChatManager.resume();
        //请求一些http的数据
        initHttpRequest();
        getTrend();
        Log.d(TAG, "resume -- ");
    }

    @Override
    protected void onPause() {
        mChatManager.pause();
        super.onPause();
        handler.removeCallbacks(countDownRunnable);
    }

    @Override
    protected void onDestroy() {
        Log.d(TAG, "onDestroy -- ");
        mChatManager.unregisterChatListener();
        mChatManager.release();
        if (betSubscription != null && !betSubscription.isUnsubscribed()) {
            betSubscription.unsubscribe();
        }
        if (lastRoomSubscription != null && !lastRoomSubscription.isUnsubscribed()) {
            lastRoomSubscription.unsubscribe();
        }
        TimeUtils.disSub();
        super.onDestroy();
    }

    @Override
    public void onBackPressed() {
        super.onBackPressed();
        finish();
    }

    @Override
    public void onClick(View v) {
        switch (v.getId()) {
            case R.id.btn_chat:

                if (mIsLinkMic) {
                    stopLinkMic();
                } else {
                    startLinkMic();
                }
                break;
            case R.id.btn_switch:
                mChatManager.switchCamera();
                break;
            case R.id.btn_flash:
                mChatManager.switchCameraFlashMode();
                break;
            case R.id.btn_mute:
                mIsMute = !mIsMute;
                mChatManager.muteMic(mIsMute);
                v.setSelected(!v.isSelected());
                break;
            case R.id.btn_setting:
                if (mSettingPanelUtil.isShowing()) {
                    mSettingPanelUtil.dismiss();
                } else {
                    mSettingPanelUtil.show();
                }
                break;
            case R.id.minus:
                calcBetIntegral(false);
                break;
            case R.id.plus:
                calcBetIntegral(true);
                break;

            case R.id.p1:
                setChecked(1);
                break;
            case R.id.p2:
                setChecked(2);
                break;
            case R.id.p3:
                setChecked(3);
                break;
            case R.id.p4:
                setChecked(4);
                break;
            case R.id.p5:
                setChecked(5);
                break;
            case R.id.p6:
                setChecked(6);
                break;
            case R.id.show:
                showTrend();
                break;
            case R.id.yishi:
                setCoin(10);
                break;
            case R.id.wushi:
                setCoin(50);
                break;
            case R.id.yibai:
                setCoin(100);
                break;
            case R.id.wubai:
                setCoin(500);
                break;
            case R.id.yik:
                setCoin(1000);
                break;
            case R.id.wuk:
                setCoin(5000);
                break;
            case R.id.shik:
                setCoin(10000);
                break;
            case R.id.wushik:
                setCoin(50000);
                break;
            case R.id.yibaik:
                setCoin(100000);
                break;
            default:
                break;
        }
    }

    /**
     * 设置筹码
     *
     * @param data 按钮上面的筹码大小
     */
    private void setCoin(int data) {
        if (isGameStart) {
            tips(getString(R.string.game_already_start));
            return;
        }
        if (isBet) {
            tips(getString(R.string.already_bet));
            return;
        }
        if (positionId == 0) {
            tips(getString(R.string.select_place));
            return;
        }
        betIntegral = betIntegral + data;
        tv_bet_integral.setText(String.valueOf(betIntegral));
    }

    /**
     * 显示趋势
     */
    private void showTrend() {
        TrendPopupWindow pw = new TrendPopupWindow(this, roundInfoModels);
        pw.show(this);
    }

    /**
     * 获取趋势
     */
    private List<RoundInfoModel> roundInfoModels = new ArrayList<>();

    private synchronized void getTrend() {
        roundInfoModels.clear();
        //添加的方位信息
        RoundInfoModel roundInfoModel = new RoundInfoModel();
        roundInfoModel.setRoomRoundId("流水号");
        roundInfoModel.setEastNorth("东北");
        roundInfoModel.setEast("东门");
        roundInfoModel.setEastSouth("东南");
        roundInfoModel.setWestNorth("西北");
        roundInfoModel.setWest("西门");
        roundInfoModel.setWestSouth("西南");
        roundInfoModel.setWinLostValue("盈亏");
        roundInfoModels.add(roundInfoModel);

        Subscription trendSubscription = Network.getNetworkInstance().getLiveApi()
                .getTrend(token, roomId, gameId)
                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(new Action1<ResultReturn<List<RoundInfoModel>>>() {
                    @Override
                    public void call(ResultReturn<List<RoundInfoModel>> ret) {
                        if (ret.getCode() == ResultReturn.ResultCode.RESULT_OK.getValue()) {
                            if (ret.getData() != null) {
                                roundInfoModels.addAll(ret.getData());
                            }
                        }
                    }
                }, new Action1<Throwable>() {
                    @Override
                    public void call(Throwable throwable) {
                    }
                });
    }

    private void calcBetIntegral(boolean flag) {
        String scoreValue = score.getText().toString().trim();
        if (TextUtils.isEmpty(scoreValue)) {
            Toast.makeText(Pull2Activity.this, "请输入下注分数", Toast.LENGTH_SHORT).show();
            return;
        }
        if (flag) {
            betIntegral = betIntegral + Integer.valueOf(scoreValue);
        } else {
            if (betIntegral == 0) {
                return;
            }
            betIntegral = betIntegral - Integer.valueOf(scoreValue);
        }
        tv_bet_integral.setText(String.valueOf(betIntegral));
    }

    private boolean isBet = false;

    private void bet() {
        betSubscription = Network.getNetworkInstance().getLiveApi()
                .bet(token, roomId, positionId, roundModel.getRoomRoundId(), betIntegral)
                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(new Action1<ResultReturn<String>>() {
                    @Override
                    public void call(ResultReturn<String> resultReturn) {
                        if (resultReturn != null && resultReturn.getCode() == ResultReturn.ResultCode.RESULT_OK.getValue()) {
                            isBet = true;
                            tips(getString(R.string.bet_success));
                        } else {
                            tips(resultReturn.getMsg() + "");
                        }
                    }
                }, new Action1<Throwable>() {
                    @Override
                    public void call(Throwable throwable) {
                    }
                });
    }

    @Override
    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
        SettingItem item = mSettingItems.get(position);
        if (item == null)
            return;
        switch (item.settingId) {
            case R.id.setting_show_log:
                if (mStatusScrollView.getVisibility() == View.GONE) {
                    mChatEventLogTv.setText(mChatEventLogStr);
                    mLogScrollView.setVisibility(View.VISIBLE);
                    mStatusScrollView.setVisibility(View.VISIBLE);
                } else {
                    mLogScrollView.setVisibility(View.GONE);
                    mStatusScrollView.setVisibility(View.GONE);
                }
                break;
            default:
                break;
        }
    }

    private void startLinkMic() {
        if (mIsLinkMic) {
            return;
        }
        if (mStartProgressDialog == null) {
            mStartProgressDialog = DialogUtils.showSimpleProgressDialog(this, "正在加入连麦，请稍等", false, new DialogInterface.OnDismissListener() {
                @Override
                public void onDismiss(DialogInterface dialog) {
                    if (mStartProgressDialog != null) {
                        mStartProgressDialog.cancel();
                        mStartProgressDialog = null;
                    }
                }
            });
        }
        resetLog();
        mIsLinkMic = true;
        mChatManager.startLinkMic();
        mChatBtn.setEnabled(false);//防止在频繁点击时，有的手机Dialog弹出较慢，使得该Button还能点击的情况
        mChatBtn.setSelected(true);
    }

    private void stopLinkMic() {
        if (!mIsLinkMic) {
            return;
        }
        if (mStopProgressDialog == null) {
            mStopProgressDialog = DialogUtils.showSimpleProgressDialog(this, "正在退出连麦，请稍等", false, new DialogInterface.OnDismissListener() {
                @Override
                public void onDismiss(DialogInterface dialog) {
                    if (mStopProgressDialog != null) {
                        mStopProgressDialog.cancel();
                        mStopProgressDialog = null;
                    }
                }
            });
        }
        mIsLinkMic = false;
        if (mChatState == WSChatConstants.ChatState.CONNECTED) {
            mChatManager.cancelLinkMic();
        } else {
            mChatManager.stopLinkMic();
        }
        mChatBtn.setEnabled(false);//防止在频繁点击时，有的手机Dialog弹出较慢，使得该Button还能点击的情况
        mChatBtn.setSelected(false);
    }

    private void updateLayout() {
        if (mFlashImageBtn != null) {
            mFlashImageBtn.setSelected(false);
        }
    }

    @Override
    public void bgmStop() {

    }

    @Override
    public void onSwitchCameraDone(boolean isSuccess, boolean isFrontCamera, String description) {

    }

    @Override
    public void onSwitchFlashMode(final boolean isSuccess) {
        ALog.e(TAG, "onSwitchFlashMode,isSuccess:" + isSuccess);
        runOnUiThread(new Runnable() {
            @Override
            public void run() {
                if (mFlashImageBtn != null && isSuccess) {
                    mFlashImageBtn.setSelected(!mFlashImageBtn.isSelected());
                }
            }
        });
    }

    @Override
    public void onStartPushState(final boolean isSuccess, String des) {

    }

    @Override
    public void onLinkMicRequestResult(final boolean isAgreed, String roomId) {
        runOnUiThread(new Runnable() {
            @Override
            public void run() {
                if (mStartProgressDialog != null) {
                    mStartProgressDialog.dismiss();
                }
                mChatBtn.setEnabled(true);
                if (!isAgreed) {
                    //停止连麦，这边负责更新UI，Manager内部做了释放的逻辑
                    mChatBtn.setSelected(false);
                    mIsLinkMic = false;
                }
            }
        });
    }

    @Override
    public void kickedout(String userId) {//观众本人被踢出房间
        runOnUiThread(new Runnable() {
            @Override
            public void run() {
                //停止连麦，这边负责更新UI，Manager内部做了释放的逻辑
                mChatBtn.setSelected(false);
                mIsLinkMic = false;
                mChatFounctionGroup.setVisibility(View.GONE);
            }
        });
    }

    @Override
    public void memberCancelRequest(String userId) {
    }

    @Override
    public void memberExitRoom(Object userList) {
        List<Map<String, Object>> extraList = (List<Map<String, Object>>) userList;
        showToast((extraList == null ? 0 : extraList.size()) + "个观众 退出了连麦 ！！");
        if (extraList != null) {
            for (Map<String, Object> map : extraList) {
                String userId = (String) map.get(SignalConstants.KEY_USER_ID);
                mMediaStatus.removeUserState(userId);
            }
        }
    }

    @Override
    public void memberJoinFailed4RoomLimit(Object userId) {

    }

    @Override
    public void memberJoinRoom(Object userList) {
    }

    @Override
    public void receiveRequestIncome(Object userList) {

    }

    @Override
    public void roomDestoryed(final String roomId) {

        runOnUiThread(new Runnable() {

            @Override
            public void run() {
                //停止连麦，这边负责更新UI，Manager内部做了释放的逻辑
                mChatBtn.setSelected(false);
                mIsLinkMic = false;
                mChatFounctionGroup.setVisibility(View.GONE);


                AlertDialog.Builder builder = new AlertDialog.Builder(Pull2Activity.this);
                builder.setTitle(android.R.string.dialog_alert_title);
                builder.setMessage("您所在的房间(" + roomId + ")已经停止直播！");
                builder.setPositiveButton("退出房间", new DialogInterface.OnClickListener() {

                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        finish();
                    }
                });
                Dialog dialog = builder.create();
                dialog.setCancelable(false);
                dialog.setCanceledOnTouchOutside(false);
                dialog.show();
            }
        });
    }

    @Override
    public void disconnected(String roomId) {
        ALog.d(TAG, "disconnected");
        runOnUiThread(new Runnable() {
            @Override
            public void run() {
                if (mStopProgressDialog != null) {
                    mStopProgressDialog.cancel();
                    mStopProgressDialog = null;
                }
                if (mStartProgressDialog != null) {
                    mStartProgressDialog.cancel();
                    mStartProgressDialog = null;
                }
                //停止连麦，这边负责更新UI，Manager内部做了释放的逻辑
                mChatBtn.setSelected(false);
                mChatBtn.setEnabled(true);
                mIsLinkMic = false;
            }
        });
    }

    @Override
    public void statusInfo(final String info, final Bundle bundle) {
        if (info != null) {
            appendChatLog(info);

            if (mLogScrollView.getVisibility() == View.GONE) {
                return;
            }

            runOnUiThread(new Runnable() {
                @Override
                public void run() {
                    mChatEventLogTv.setText(mChatEventLogStr);
                }
            });

        } else {
            runOnUiThread(new Runnable() {
                @Override
                public void run() {
                    String action = bundle.getString(MediaConstants.STATUS_ACTION);
                    String userId = bundle.getString(MediaConstants.STATUS_USER_INFO);
                    if (action != null && action.equals("PUSH")) {
                        String status = formatPushStatusString(bundle);
                        mMediaStatus.putUserState(userId, status);
                    } else if (action != null && action.equals("PULL")) {
                        String status = formatPullStatusString(bundle);
                        mMediaStatus.putUserState(userId, status);
                    }
                    if (mStatusScrollView.getVisibility() == View.GONE) {
                        return;
                    }
                    String status = mMediaStatus.getUserStates();
                    mStatusLogTv.setText(status);
                }
            });
        }
    }

    @Override
    public void clearQueue(String message) {

    }

    @Override
    public void kickSomeoneFailed(String userId) {

    }

    @Override
    public void acceptChatFailed(String userId, String pushUrl) {

    }

    @Override
    public void kickAllFailed(String userId, String pushUrl) {

    }

    private void resetLog() {
        //status log
        mMediaStatus.clear();

        //even log
        mChatEventLogStr.setLength(0);
        mStatusLogTv.setText("");
        mChatEventLogTv.setText("");
        mChatEventLogStr.append("WSChat SDK Version:" + WSVersion.VERSION).append("\r\n");
        mChatEventLogStr.append("用户ID:" + mChatConfig.userId).append("\r\n");
        mChatEventLogStr.append("房间ID:" + mChatConfig.roomID).append("\r\n");
        mChatEventLogStr.append("推流URL:" + mChatConfig.pushRtmpUrl).append("\r\n");
        mChatEventLogTv.setText(mChatEventLogStr);
    }

    private void appendChatLog(String log) {
        //检查长度
        while (mChatEventLogStr.length() > 3000) {
            int idx = mChatEventLogStr.indexOf("\n");
            if (idx == 0)
                idx = 1;
            mChatEventLogStr = mChatEventLogStr.delete(0, idx);
        }

        SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss.SSS");
        String date = sdf.format(System.currentTimeMillis());
        mChatEventLogStr = mChatEventLogStr.append("\n" + "[" + date + "]" + log);
    }

    /**
     * 确定下注信息
     *
     * @param view
     */
    public void onSubmitScore(View view) {
        if (roundModel == null || roundModel.getRoomRoundId() == 0) {
            tips(getString(R.string.game_not_start));
            return;
        }
        if (isGameStart) {
            tips(getString(R.string.game_not_on_bet_time));
            return;
        }
        if (isBet) {
            tips(getString(R.string.already_bet));
            return;
        }
        if (betIntegral == 0 || positionId == 0) {
            tips(getString(R.string.please_select_place_or_integral));
            return;
        }
        if (betIntegral > userIntegral) {
            tips(getString(R.string.integral_shortage));
            return;
        }
        bet();
    }

    /**
     * @param view
     */
    public void onClearScore(View view) {
        if (isBet) {
            tips(getString(R.string.already_bet_cannot_clear));
            return;
        }
        betIntegral = 0;
        tv_bet_integral.setText(String.valueOf(0));
        clearSelect();
    }

    public void toServiceCall(View view) {
        Intent intent = new Intent();
        intent.setAction(Intent.ACTION_DIAL);
        intent.setData(Uri.parse("tel:" + getString(R.string.call)));
        startActivity(intent);
    }

    private void getWinLoseByRoundId(int roundId) {
        Subscription subscription = Network.getNetworkInstance().getLiveApi()
                .getWinLoseByRoundId(token, roundId)
                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(new Action1<ResultReturn<WinLoseModel>>() {
                    @Override
                    public void call(ResultReturn<WinLoseModel> resultReturn) {
                        if (resultReturn != null && resultReturn.getCode() == ResultReturn.ResultCode.RESULT_OK.getValue()) {
                            showResult(resultReturn.getData().getWinLoseValue());
                        }
                    }
                }, new Action1<Throwable>() {
                    @Override
                    public void call(Throwable throwable) {
                    }
                });
    }

    ToastUtil2 toastUtil;

    private void showResult(int value) {
        View view = View.inflate(this, R.layout.dialog_result, null);
        SimpleDraweeView sdv = (SimpleDraweeView) view.findViewById(R.id.sdv);
        TextView tvPoint = (TextView) view.findViewById(R.id.tv_my_point);
        if (value > 0) {
            sdv.setBackgroundResource(R.drawable.win);
            tvPoint.setText("恭喜你!本局赢了" + value + "分!");
            tvPoint.setTextColor(Color.parseColor("#FFFF0000"));
        } else if (value < 0) {
            sdv.setBackgroundResource(R.drawable.lose);
            tvPoint.setText("加油!本局输了" + value + "分!");
            tvPoint.setTextColor(Color.parseColor("#FF00FF00"));
        } else {
            sdv.setBackgroundResource(R.drawable.win);
            tvPoint.setText("加油!本局是平局!");
            tvPoint.setTextColor(Color.parseColor("#FF323232"));
        }

        toastUtil = new ToastUtil2(this, view);
        toastUtil.show(3000);
    }
}
