package com.wyzk.lottery.video.widget;

import android.app.AlertDialog;
import android.content.Context;
import android.graphics.drawable.ColorDrawable;
import android.os.Bundle;
import android.support.annotation.NonNull;
import android.view.LayoutInflater;
import android.view.View;
import android.view.Window;
import android.view.WindowManager;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.ArrayAdapter;
import android.widget.SeekBar;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import com.wangsu.wsrtc.sdk.WSChatConstants;
import com.wangsu.wsrtc.sdk.WSVideoFilter;
import com.wyzk.lottery.R;
import com.wyzk.lottery.video.filter.VideoFilterDemo1;
import com.wyzk.lottery.video.filter.VideoFilterDemo2;
import com.wyzk.lottery.video.filter.VideoFilterDemo3;

import java.util.ArrayList;
import java.util.List;

/**
 * Created by zhangb2 on 17.7.26.
 */

public class BeautySettingDialog extends AlertDialog {

    public static final int BEAUTY_SWITCH_FILTER = 0;
    public static final int BEAUTY_SET_STYLE_FILTER_MODEL = 1;
    public static final int BEAUTY_SET_FILTER = 2;
    public static final int BEAUTY_SET_FILTERS = 3;
    private static WSChatConstants.FilterType mCurrentFilter = WSChatConstants.FilterType.NONE;
    private static int mCurrenStyleFilter = 0;
    private static int mCurrenCustomFilter = 0;
    private static int mStyleLevel = 5;
    private Context mContext;
    private IOnBeautyParamsChangeListener mBeautyParamsChangeListener;

    public BeautySettingDialog(@NonNull Context context) {
        super(context);
        this.mContext = context;
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        initView();
        Window window = getWindow();
        WindowManager.LayoutParams params = window.getAttributes();
        params.dimAmount = 0f;
        window.setAttributes(params);
        window.setBackgroundDrawable(new ColorDrawable(0x00000000));
    }

    public void setBeautyParamsChangeListener(IOnBeautyParamsChangeListener listener) {
        mBeautyParamsChangeListener = listener;
    }

    public void show() {
        super.show();
    }

    public void dissmiss() {
        super.dismiss();
    }

    private void initView() {
        LayoutInflater inflater = (LayoutInflater) mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
        View rootView = inflater.inflate(R.layout.beauty_pick_view, null);
        setContentView(rootView);
        final SeekBar beautySeekBar = (SeekBar) rootView.findViewById(R.id.beauty_level);
        final TextView beautyValueTv = (TextView) rootView.findViewById(R.id.beauty_level_value);
        final SeekBar styleSeekBar = (SeekBar) rootView.findViewById(R.id.style_level);
        final TextView styleValueTv = (TextView) rootView.findViewById(R.id.style_level_value);

        beautySeekBar.setMax(10);//美颜参数范围0~10
        if (mCurrentFilter.getLevel() < 0) {
            beautySeekBar.setEnabled(false);
            beautySeekBar.setProgress(0);
            beautyValueTv.setText("" + 0);
        } else {
            beautySeekBar.setEnabled(true);
            beautySeekBar.setProgress(mCurrentFilter.getLevel());
            beautyValueTv.setText("" + mCurrentFilter.getLevel());
        }
        SeekBar.OnSeekBarChangeListener onSeekBarChangeListener = new SeekBar.OnSeekBarChangeListener() {
            @Override
            public void onStopTrackingTouch(SeekBar seekBar) {
            }

            @Override
            public void onStartTrackingTouch(SeekBar seekBar) {
            }

            @Override
            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
                if (!fromUser) return;
                switch (seekBar.getId()) {
                    case R.id.beauty_level:
                        if (progress != mCurrentFilter.getLevel()) {
                            mCurrentFilter.setLevel(progress);
                            beautyValueTv.setText("" + progress);
                            if (mBeautyParamsChangeListener != null) {
                                BeautyParams params = new BeautyParams();
                                params.filterType = mCurrentFilter;
                                mBeautyParamsChangeListener.onBeautyParamsChange(params, BEAUTY_SWITCH_FILTER);
                            }
                        }
                        break;
                    case R.id.style_level:
                        String modelPath = mContext.getResources().getStringArray(R.array.filter_path)[mCurrenStyleFilter];
                        if (progress != mStyleLevel) {
                            mStyleLevel = progress;
                            styleValueTv.setText("" + mStyleLevel);
                            if (mBeautyParamsChangeListener != null) {
                                BeautyParams params = new BeautyParams();
                                params.modlePath = modelPath;
                                params.level = progress;
                                mBeautyParamsChangeListener.onBeautyParamsChange(params, BEAUTY_SET_STYLE_FILTER_MODEL);
                            }
                        }
                        break;

                    default:
                        break;
                }
            }
        };
        beautySeekBar.setOnSeekBarChangeListener(onSeekBarChangeListener);
        styleSeekBar.setMax(10);//滤镜参数范围0~10
        styleSeekBar.setOnSeekBarChangeListener(onSeekBarChangeListener);


        OnItemSelectedListener onItemSelectedListener = new OnItemSelectedListener() {

            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int pos, long id) {
                switch (parent.getId()) {
                    case R.id.beauty_type:
                        if (mBeautyParamsChangeListener != null) {
                            BeautyParams params = new BeautyParams();
                            params.filterType = WSChatConstants.FilterType.values()[pos];
                            mBeautyParamsChangeListener.onBeautyParamsChange(params, BEAUTY_SWITCH_FILTER);

                            Toast.makeText(mContext, WSChatConstants.FILTER_TYPE_ALL[pos].toString(), Toast.LENGTH_SHORT).show();
                            mCurrentFilter = WSChatConstants.FilterType.values()[pos];
                            if (mCurrentFilter.getLevel() < 0) {
                                beautySeekBar.setEnabled(false);
                                beautySeekBar.setProgress(0);
                                beautyValueTv.setText("" + 0);
                            } else {
                                beautySeekBar.setEnabled(true);
                                beautySeekBar.setProgress(mCurrentFilter.getLevel());
                                beautyValueTv.setText("" + mCurrentFilter.getLevel());
                            }
                        }
                        break;
                    case R.id.style_type:
                        String modelPath = mContext.getResources().getStringArray(R.array.filter_path)[pos];
                        if (mBeautyParamsChangeListener != null) {
                            BeautyParams params = new BeautyParams();
                            params.modlePath = modelPath;
                            params.level = mStyleLevel;
                            mBeautyParamsChangeListener.onBeautyParamsChange(params, BEAUTY_SET_STYLE_FILTER_MODEL);

                            mCurrenStyleFilter = pos;
                            int[] disableIdxs = mContext.getResources().getIntArray(R.array.filter_index_unsupport_level);
                            boolean enable = true;
                            for (int i = 0; i < disableIdxs.length; i++) {
                                if (pos == disableIdxs[i]) {
                                    enable = false;
                                }
                            }
                            styleSeekBar.setEnabled(enable);
                            styleSeekBar.setProgress(enable ? mStyleLevel : 0);
                            styleValueTv.setText(enable ? "" + mStyleLevel : "0");
                        }
                        break;
                    case R.id.custom_type:
                        switch (pos) {
                            case 0://无
                                //设置null或list为空可关闭自定义滤镜
                                if (mBeautyParamsChangeListener != null) {
                                    BeautyParams params = new BeautyParams();
                                    params.filter = null;
                                    mBeautyParamsChangeListener.onBeautyParamsChange(params, BEAUTY_SET_FILTER);
                                }
                                break;
                            case 1://自定义滤镜
                                //初始化自定义
                                if (mBeautyParamsChangeListener != null) {
                                    BeautyParams params = new BeautyParams();
                                    params.filter = new VideoFilterDemo1();
                                    mBeautyParamsChangeListener.onBeautyParamsChange(params, BEAUTY_SET_FILTER);
                                }
                                break;
                            case 2://自定义滤镜组
                                if (mBeautyParamsChangeListener != null) {
                                    List<WSVideoFilter> filters = new ArrayList<WSVideoFilter>();
                                    filters.add(new VideoFilterDemo2());
                                    filters.add(new VideoFilterDemo3());
                                    BeautyParams params = new BeautyParams();
                                    params.filters = filters;
                                    mBeautyParamsChangeListener.onBeautyParamsChange(params, BEAUTY_SET_FILTERS);
                                }
                                break;
                        }
                        mCurrenCustomFilter = pos;
                        break;

                    default:
                        break;
                }

            }

            @Override
            public void onNothingSelected(AdapterView<?> arg0) {
            }
        };


        Spinner beautySpinner = (Spinner) rootView.findViewById(R.id.beauty_type);
        String filterNames[] = new String[WSChatConstants.FILTER_TYPE_ALL.length];
        for (int i = 0; i < WSChatConstants.FILTER_TYPE_ALL.length; i++) {
            filterNames[i] = WSChatConstants.FILTER_TYPE_ALL[i].toString();
        }
        beautySpinner.setAdapter(new ArrayAdapter<String>(mContext, android.R.layout.simple_spinner_dropdown_item, filterNames));
        beautySpinner.setOnItemSelectedListener(onItemSelectedListener);
        beautySpinner.setSelection(mCurrentFilter.ordinal());

        Spinner styleSpinner = (Spinner) rootView.findViewById(R.id.style_type);
        styleSpinner.setOnItemSelectedListener(onItemSelectedListener);
        styleSpinner.setSelection(mCurrenStyleFilter);

        Spinner customFilterSpinner = (Spinner) rootView.findViewById(R.id.custom_type);
        customFilterSpinner.setOnItemSelectedListener(onItemSelectedListener);
        customFilterSpinner.setAdapter(new ArrayAdapter<String>(mContext, android.R.layout.simple_spinner_dropdown_item, new String[]{"无", "滤镜", "滤镜组"}));
        customFilterSpinner.setSelection(mCurrenCustomFilter);
    }

    public interface IOnBeautyParamsChangeListener {
        void onBeautyParamsChange(BeautyParams params, int type);
    }

    public static class BeautyParams {
        public WSChatConstants.FilterType filterType;
        public String modlePath;
        public int level;

        public List<WSVideoFilter> filters;
        public WSVideoFilter filter;
    }


}
