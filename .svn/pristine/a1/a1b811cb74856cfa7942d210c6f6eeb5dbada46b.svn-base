/*
 *  Copyright 2014 The WebRTC Project Authors. All rights reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree. An additional intellectual property rights grant can be found
 *  in the file PATENTS.  All contributing project authors may
 *  be found in the AUTHORS file in the root of the source tree.
 */

package com.wyzk.lottery.video.activity;

import android.app.Activity;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.SharedPreferences.OnSharedPreferenceChangeListener;
import android.net.Uri;
import android.os.Bundle;
import android.preference.ListPreference;
import android.preference.Preference;
import android.preference.PreferenceActivity;
import android.text.TextUtils;
import android.widget.Toast;

import com.wyzk.lottery.R;
import com.wyzk.lottery.video.utils.UriUtils;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;
import java.util.Set;

public class SettingsActivity extends PreferenceActivity implements OnSharedPreferenceChangeListener, Preference.OnPreferenceClickListener {

    private final int REQUEST_CODE_CONFIG_FILE_PICK = 0;

    private String keyprefAppId;
    private String keyprefAuthKey;
    private String keyprefUserHost;
    private String keyprefConfigPageDebug;
    private String keyprefSlsUrl;
    private String keyprefDispatchUrl;
    private String keyprefConfigFile;
    private HashMap<String, String> configKeyMap = null;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        addPreferencesFromResource(R.xml.preferences);
        keyprefAppId = getString(R.string.pref_private_appid_key);
        keyprefAuthKey = getString(R.string.pref_private_authkey_key);
        keyprefUserHost = getString(R.string.pref_private_user_host_key);
        keyprefSlsUrl = getString(R.string.pref_private_sls_url_key);
        keyprefDispatchUrl = getString(R.string.pref_private_dispatch_url_key);
        keyprefConfigPageDebug = getString(R.string.pref_more_config_page_debug_key);
        keyprefConfigFile = getString(R.string.pref_more_config_file_path_key);
        configKeyMap = new HashMap<>();
        configKeyMap.put("appId", keyprefAppId);
        configKeyMap.put("authKey", keyprefAuthKey);
        configKeyMap.put("userHost", keyprefUserHost);
        configKeyMap.put("slsUrl", keyprefSlsUrl);
        configKeyMap.put("dispatchUrl", keyprefDispatchUrl);
        configKeyMap.put("push_url", "push_url");
        configKeyMap.put("pull_url", "pull_url");
        Preference preference = getPreferenceScreen().findPreference(keyprefConfigFile);
        preference.setOnPreferenceClickListener(this);
    }

    @Override
    protected void onResume() {
        super.onResume();
        // Set summary to be the user-description for the selected value
        SharedPreferences sharedPreferences = getPreferenceScreen().getSharedPreferences();
        sharedPreferences.registerOnSharedPreferenceChangeListener(this);
        updateSummary(sharedPreferences, keyprefAppId);
        updateSummary(sharedPreferences, keyprefAuthKey);
        updateSummary(sharedPreferences, keyprefUserHost);
        updateSummary(sharedPreferences, keyprefSlsUrl);
        updateSummary(sharedPreferences, keyprefDispatchUrl);
        updateSummaryB(sharedPreferences, keyprefConfigPageDebug);
        updateSummary(sharedPreferences, keyprefConfigFile);

    }

    @Override
    protected void onPause() {
        super.onPause();
        SharedPreferences sharedPreferences = getPreferenceScreen().getSharedPreferences();
        sharedPreferences.unregisterOnSharedPreferenceChangeListener(this);
    }

    @Override
    public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {
        // clang-format off
        if (key.equals(keyprefAppId)
                || key.equals(keyprefAuthKey)
                || key.equals(keyprefUserHost)
                || key.equals(keyprefSlsUrl)
                || key.equals(keyprefDispatchUrl)
                || key.equals(keyprefConfigFile)) {
            updateSummary(sharedPreferences, key);
        } else if (key.equals(keyprefConfigPageDebug)) {
            updateSummaryB(sharedPreferences, key);
        }
    }

    @Override
    public boolean onPreferenceClick(Preference preference) {
        String key = preference.getKey();
        if (key.equals(keyprefConfigFile)) {
            Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
            intent.setType("*/*");
            intent.addCategory(Intent.CATEGORY_OPENABLE);
            startActivityForResult(Intent.createChooser(intent, "选择有效的配置文件"), REQUEST_CODE_CONFIG_FILE_PICK);
        }
        return false;
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        switch (requestCode) {
            case REQUEST_CODE_CONFIG_FILE_PICK: {
                if (resultCode == Activity.RESULT_OK) {
                    // Get the Uri of the selected file
                    Uri uri = data.getData();
                    String path = UriUtils.getPathFromUri(this, uri);

                    if (TextUtils.isEmpty(path)) {
                        Toast.makeText(this, "获取文件路径失败 ", Toast.LENGTH_LONG).show();
                        return;
                    }
                    SharedPreferences sharedPreferences = getPreferenceScreen().getSharedPreferences();
                    if (loadSettingsFromConfigFile(sharedPreferences, path)) {
                        sharedPreferences.edit().putString(keyprefConfigFile, path).commit();
                    } else {
                        Toast.makeText(this, "加载配置文件失败 ", Toast.LENGTH_LONG).show();
                    }
                }
                break;
            }
        }

    }

    private void updateSummary(SharedPreferences sharedPreferences, String key) {
        Preference updatedPref = getPreferenceScreen().findPreference(key);
        // Set summary to be the user-description for the selected value
        updatedPref.setSummary(sharedPreferences.getString(key, ""));
    }


    private void updateSummaryB(SharedPreferences sharedPreferences, String key) {
        Preference updatedPref = getPreferenceScreen().findPreference(key);
        updatedPref.setSummary(sharedPreferences.getBoolean(key, true)
                ? getString(R.string.pref_value_on)
                : getString(R.string.pref_value_off));
    }

    private void updateSummaryList(SharedPreferences sharedPreferences, String key) {
        ListPreference updatedPref = (ListPreference) getPreferenceScreen().findPreference(key);
        updatedPref.setSummary(updatedPref.getEntry());
    }

    private boolean loadSettingsFromConfigFile(SharedPreferences sharedPreferences, String path) {
        if (configKeyMap == null || configKeyMap.isEmpty()) {
            return false;
        }
        FileInputStream inputStream = null;
        try {
            File file = new File(path);
            if (!file.exists() || file.isDirectory()) return false;
            inputStream = new FileInputStream(file);
            Properties properties = new Properties();
            properties.load(inputStream);
            Set<Map.Entry<String, String>> entrySet = configKeyMap.entrySet();
            SharedPreferences.Editor editor = sharedPreferences.edit();
            for (Map.Entry<String, String> entry : entrySet) {
                String value = properties.getProperty(entry.getKey(), null);
                if (value != null) {
                    editor.putString(entry.getValue(), value);
                }
            }
            editor.commit();
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        } finally {
            if (inputStream != null) {
                try {
                    inputStream.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
        return true;
    }

}
