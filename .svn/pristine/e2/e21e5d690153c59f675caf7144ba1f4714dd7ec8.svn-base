package com.wyzk.lottery.video.utils;

import android.content.Context;
import android.text.TextUtils;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.animation.AlphaAnimation;
import android.view.animation.AnimationSet;
import android.view.animation.LayoutAnimationController;
import android.view.animation.TranslateAnimation;
import android.widget.LinearLayout;

import com.wyzk.lottery.R;
import com.wyzk.lottery.video.view.CircleImageView;

import java.util.LinkedList;

public class AudienceQueue implements OnClickListener {

    private final int[] mUserIcon = new int[]{R.drawable.person_icon_0, R.drawable.person_icon_1, R.drawable.person_icon_2,
            R.drawable.person_icon_3, R.drawable.person_icon_4, R.drawable.person_icon_5, R.drawable.person_icon_6};
    private ViewGroup mContainer;
    private Context mContext;
    private LinkedList<String> mUserList = new LinkedList<String>();
    private ItemClickListener mItemClickListener = null;


    // With action button
    public AudienceQueue(Context context, ViewGroup scrollView, String[] userIds) {
        mContext = context;
        mContainer = scrollView;
        if (userIds != null && userIds.length > 0) {
            for (int i = 0; i < userIds.length; i++) {
                addUser(userIds[i]);
            }

        }
//        mHorizontalScrollView.setLayoutAnimation(getLayoutAnimationController());
    }

    private LayoutAnimationController getLayoutAnimationController() {
        if (mContainer == null) return null;
        float endX = 0;
        float startY = mContainer.getY();
        float startX = mContainer.getX() + mContainer.getWidth();
        int childCount = mContainer.getChildCount();
        if (childCount == 0) {
            startX = mContainer.getX();
        } else {
            View view = mContainer.getChildAt(childCount - 1);
            startX = view.getX() + view.getWidth();
        }
        AnimationSet set = new AnimationSet(true);
        set.setDuration(2 * 1000);
        AlphaAnimation alpha = new AlphaAnimation(0.1f, 1.0f);
        TranslateAnimation translate = new TranslateAnimation(startX, endX, startY, startY);
        set.addAnimation(alpha);
        set.addAnimation(translate);
        LayoutAnimationController controller = new LayoutAnimationController(set);
        return controller;
    }

    public void setItemClickListener(ItemClickListener listener) {
        this.mItemClickListener = listener;
    }

    public void addUser(final String userId, final String pushUrl) {
        if (mContainer == null) return;
        if (TextUtils.isEmpty(userId)) return;
        for (int i = 0; i < mUserList.size(); i++) {
            if (userId.equals(mUserList.get(i))) {
                return;
            }
        }
        int resId = mUserIcon[Math.abs(userId.hashCode()) % mUserIcon.length];
        mUserList.add(userId);
        addView(userId, resId, pushUrl);
    }

    public void addUser(final String userId) {
        addUser(userId, null);
    }

    private void addView(final String userId, final int resId, final String pushUrl) {
        mContainer.post(new Runnable() {

            @Override
            public void run() {
                CircleImageView imageView = new CircleImageView(mContext);
                imageView.setImageResource(resId);
                imageView.setId(Math.abs(userId.hashCode()));
                if (TextUtils.isEmpty(pushUrl)) {
                    imageView.setTag(userId);
                } else {
                    imageView.setTag(userId + ";" + pushUrl);
                }
                imageView.setBackground(null);
                imageView.setOnClickListener(AudienceQueue.this);
                imageView.setPadding(0, 0, 0, 0);
                int width = mContext.getResources().getDimensionPixelSize(R.dimen.audience_icon_hight);
                LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(width, width);
                mContainer.addView(imageView, layoutParams);
            }
        });
    }

    private void removeView(final int index) {
        mContainer.post(new Runnable() {
            @Override
            public void run() {
                mContainer.removeViewAt(index);
            }
        });
    }

    public void removeUser(String userId) {
        if (mContainer == null) return;
        if (TextUtils.isEmpty(userId)) return;

        int index = -1;
        for (int i = 0; i < mUserList.size(); i++) {
            if (userId.equals(mUserList.get(i))) {
                mUserList.remove(i);
                index = i;
                break;
            }
        }
        if (index > -1) {
            removeView(index);
        }
    }

    public void clear() {
        if (mContainer == null) return;
        mUserList.clear();
        mContainer.post(new Runnable() {
            @Override
            public void run() {
                mContainer.removeAllViews();
            }
        });
    }

    @Override
    public void onClick(View view) {
        String tag = (String) view.getTag();
        String userId;
        String pushUrl = null;
        if (tag.contains(";")) {
            userId = tag.split(";")[0];
            pushUrl = tag.split(";")[1];
        } else {
            userId = tag;
        }
        Log.i("zhongrui", "userId : " + userId);
        if (mItemClickListener != null) {
            mItemClickListener.onItemClickListener(view, userId, pushUrl);
        }
    }

    public interface ItemClickListener {
        public void onItemClickListener(View view, String userId, String pushUrl);
    }


}